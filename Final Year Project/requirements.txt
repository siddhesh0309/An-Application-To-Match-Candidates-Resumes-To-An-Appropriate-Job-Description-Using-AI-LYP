argcomplete==1.10.3
asgiref==3.6.0
beautifulsoup4==4.8.2
certifi==2023.5.7
chardet==3.0.4
charset-normalizer==3.1.0
click==8.1.3
colorama==0.4.6
compressed-rtf==1.0.6
crypto==1.4.1
dateutils==0.6.12
Django==4.2.1
docx2txt==0.8
ebcdic==1.1.1
extract-msg==0.28.7
gensim==4.3.1
idna==3.4
IMAPClient==2.1.0
inflect==6.0.4
joblib==1.2.0
lxml==4.9.2
mysqlclient==2.1.1
Naked==0.1.32
nltk==3.8.1
numpy==1.24.3
olefile==0.46
pandas==2.0.1
pdfminer.six==20191110
Pillow==9.5.0
psycopg2==2.9.6
pycryptodome==3.17
pydantic==1.10.7
PyPDF2==3.0.1
python-dateutil==2.8.2
python-pptx==0.6.21
pytz==2023.3
pytz-deprecation-shim==0.1.0.post0
PyYAML==6.0
regex==2023.5.5
requests==2.30.0
scikit-learn==1.2.2
scipy==1.10.1
shellescape==3.8.1
six==1.12.0
smart-open==6.3.0
sortedcontainers==2.4.0
soupsieve==2.4.1
SpeechRecognition==3.8.1
sqlparse==0.4.4
stop-words==2018.7.23
textract==1.6.5
threadpoolctl==3.1.0
tqdm==4.65.0
typing_extensions==4.5.0
tzdata==2023.3
tzlocal==4.3
urllib3==2.0.2
xlrd==1.2.0
XlsxWriter==3.1.0


from fastapi import FastAPI, BackgroundTasks
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import Select
from time import sleep
import shutil, os, glob, datetime, pandas as pd
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.proxy import Proxy, ProxyType
from string import punctuation
import uvicorn

app = FastAPI()


def multiple_dfs(df_list, sheets, file_name, spaces):
    writer = pd.ExcelWriter(file_name, engine="xlsxwriter")
    row = 0
    for dataframe in df_list:
        dataframe.to_excel(writer, sheet_name=sheets, startrow=row, startcol=0)
        row = row + len(dataframe.index) + spaces + 1
    writer.close()


def download_amfi_data(download_directory: str):
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--ignore-certificate-errors")
    options.add_experimental_option(
        "prefs",
        {
            "download.default_directory": download_directory,
            "download.directory_upgrade": True,
        },
    )

    service = Service(
        "C:/Users/SIDDHESH/OneDrive/Desktop/HSBC DOC/chromedriver-win64/chromedriver.exe"
    )
    driver = webdriver.Chrome(service=service, options=options)

    try:
        driver.get(
            "https://www.amfiindia.com/research-information/other-data/mf-scheme-performance-details"
        )
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//iframe"))
        )
        iframe = driver.find_element(By.XPATH, "//iframe")
        driver.switch_to.frame(iframe)

        entities_list = []
        sub_entities_list = []
        Funds_data = []
        headers_list = []

        entity = driver.find_elements(
            By.XPATH, "/html/body/form/div/div/div[2]/div[1]/div[1]/select/option"
        )
        categories = driver.find_elements(
            By.XPATH, "/html/body/form/div/div/div[3]/div[1]/div[1]/select/option"
        )
        funds = driver.find_elements(
            By.XPATH, "/html/body/form/div/div/div[4]/div[1]/div[1]/select/option"
        )
        headers = driver.find_elements(
            By.XPATH, "//html/body/form/div/div/div[1]/div[1]/div[1]/select/option"
        )
        date = driver.find_element(
            By.XPATH, "//html[1]/body[1]/form[1]/div/div[1]/div[5]/div/input"
        ).get_attribute("value")

        for i in headers:
            if i.get_attribute("text") != "Select Type":
                headers_list.append(i.get_attribute("text"))

        for i in funds:
            Funds_data.append(i.get_attribute("text"))

        for i in entity:
            if i.get_attribute("text") != "Select Category":
                entities_list.append(i.get_attribute("text"))

        for i in categories:
            if i.get_attribute("text") != "Sub Category":
                sub_entities_list.append(i.get_attribute("text"))

        for header in headers_list:
            if header == "Open-ended":
                for i in range(len(entities_list)):
                    try:
                        # Entity Button
                        driver.find_element(
                            By.XPATH,
                            "/html/body/form/div/div/div[2]/div[1]/div[1]/button",
                        ).click()
                        # select entity
                        driver.find_element(
                            By.XPATH,
                            "/html/body/div[2]/div/ul/li[" + str(i + 1) + "]/a/span[1]",
                        ).click()
                        for j in range(len(sub_entities_list)):
                            try:
                                driver.find_element(
                                    By.XPATH,
                                    "/html/body/form/div/div/div[3]/div[1]/div[1]/button",
                                ).click()
                                driver.find_element(
                                    By.XPATH,
                                    "/html/body/div[2]/div/ul/li[" + str(j + 1) + "]/a",
                                ).click()

                                print("Downloading: ", sub_entities_list[j])
                                driver.find_element(
                                    By.XPATH, "//button[@type='submit']"
                                ).click()
                                driver.find_element(
                                    By.XPATH, ".//a[@id='download-report-excel']"
                                ).click()
                                sleep(3)
                                files = glob.glob(download_directory + "/*")
                                max_file = max(files, key=os.path.getmtime)
                                filename = max_file.split("/")[-1].split(".")[0]
                                if "fund-performance" in filename:
                                    try:
                                        new_path = max_file.replace(
                                            filename,
                                            header
                                            + "--"
                                            + entities_list[i]
                                            + "--"
                                            + sub_entities_list[j].translate(
                                                str.maketrans("", "", punctuation)
                                            )
                                            + "--"
                                            + date,
                                        )
                                        os.rename(max_file, new_path)
                                        shutil.move(new_path, download_directory)
                                    except Exception as e:
                                        print(e)
                            except:
                                pass
                    except:
                        pass
        driver.close()

    except Exception as e:
        print(e)
        driver.close()


@app.get("/download-amfi")
async def download_amfi(background_tasks: BackgroundTasks):
    time_based_subfolder = "AMFI_Performance_Reports_" + datetime.datetime.strftime(
        datetime.datetime.now(), "%d%m%Y%H_%M_%S"
    )
    download_directory = os.path.join(os.getcwd(), time_based_subfolder)

    # Make sure the directory exists
    if not os.path.exists(download_directory):
        os.makedirs(download_directory)

    background_tasks.add_task(download_amfi_data, download_directory)
    return {
        "message": "Download process started",
        "download_directory": download_directory,
    }


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)

